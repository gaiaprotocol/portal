/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MixSenderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "received"
      | "receiveOverHorizon"
      | "signer"
      | "sendCount"
      | "setSigner"
      | "renounceOwnership"
      | "owner"
      | "isOwner"
      | "sended"
      | "mix"
      | "sendOverHorizon"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetSigner"
      | "SendOverHorizon"
      | "ReceiveOverHorizon"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "received",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveOverHorizon",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendCount",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sended",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendOverHorizon",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "received", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveOverHorizon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sended", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendOverHorizon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace SetSignerEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendOverHorizonEvent {
  export type InputTuple = [
    sender: AddressLike,
    toChain: BigNumberish,
    receiver: AddressLike,
    sendId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    toChain: bigint,
    receiver: string,
    sendId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    sender: string;
    toChain: bigint;
    receiver: string;
    sendId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveOverHorizonEvent {
  export type InputTuple = [
    receiver: AddressLike,
    fromChain: BigNumberish,
    sender: AddressLike,
    sendId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    fromChain: bigint,
    sender: string,
    sendId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    receiver: string;
    fromChain: bigint;
    sender: string;
    sendId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MixSender extends BaseContract {
  connect(runner?: ContractRunner | null): MixSender;
  waitForDeployment(): Promise<this>;

  interface: MixSenderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [boolean],
    "view"
  >;

  receiveOverHorizon: TypedContractMethod<
    [
      fromChain: BigNumberish,
      toChain: BigNumberish,
      sender: AddressLike,
      sendId: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sendCount: TypedContractMethod<
    [sender: AddressLike, toChain: BigNumberish, receiver: AddressLike],
    [bigint],
    "view"
  >;

  setSigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  sended: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;

  mix: TypedContractMethod<[], [string], "view">;

  sendOverHorizon: TypedContractMethod<
    [toChain: BigNumberish, receiver: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "receiveOverHorizon"
  ): TypedContractMethod<
    [
      fromChain: BigNumberish,
      toChain: BigNumberish,
      sender: AddressLike,
      sendId: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendCount"
  ): TypedContractMethod<
    [sender: AddressLike, toChain: BigNumberish, receiver: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "sended"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: AddressLike,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "mix"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendOverHorizon"
  ): TypedContractMethod<
    [toChain: BigNumberish, receiver: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "SetSigner"
  ): TypedContractEvent<
    SetSignerEvent.InputTuple,
    SetSignerEvent.OutputTuple,
    SetSignerEvent.OutputObject
  >;
  getEvent(
    key: "SendOverHorizon"
  ): TypedContractEvent<
    SendOverHorizonEvent.InputTuple,
    SendOverHorizonEvent.OutputTuple,
    SendOverHorizonEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveOverHorizon"
  ): TypedContractEvent<
    ReceiveOverHorizonEvent.InputTuple,
    ReceiveOverHorizonEvent.OutputTuple,
    ReceiveOverHorizonEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "SetSigner(address)": TypedContractEvent<
      SetSignerEvent.InputTuple,
      SetSignerEvent.OutputTuple,
      SetSignerEvent.OutputObject
    >;
    SetSigner: TypedContractEvent<
      SetSignerEvent.InputTuple,
      SetSignerEvent.OutputTuple,
      SetSignerEvent.OutputObject
    >;

    "SendOverHorizon(address,uint256,address,uint256,uint256)": TypedContractEvent<
      SendOverHorizonEvent.InputTuple,
      SendOverHorizonEvent.OutputTuple,
      SendOverHorizonEvent.OutputObject
    >;
    SendOverHorizon: TypedContractEvent<
      SendOverHorizonEvent.InputTuple,
      SendOverHorizonEvent.OutputTuple,
      SendOverHorizonEvent.OutputObject
    >;

    "ReceiveOverHorizon(address,uint256,address,uint256,uint256)": TypedContractEvent<
      ReceiveOverHorizonEvent.InputTuple,
      ReceiveOverHorizonEvent.OutputTuple,
      ReceiveOverHorizonEvent.OutputObject
    >;
    ReceiveOverHorizon: TypedContractEvent<
      ReceiveOverHorizonEvent.InputTuple,
      ReceiveOverHorizonEvent.OutputTuple,
      ReceiveOverHorizonEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
